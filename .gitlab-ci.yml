variables:
  CI_REGISTRY_IMAGE: personal-area-app
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/  
stages:
  - build
  - docker-build
  - deploy

build:
  stage: build
  image: node:20
  script: 
    - echo "Start building App"
    - npm install
    - npm run build
    - echo "Build successfully!"
  artifacts:
    expire_in: 1 hour
    paths:
      - build
      - node_modules/

docker-build-frontend:  
  image: docker:latest
  stage: docker-build
  before_script:
    - docker info
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $REGISTRY_SERVER_ADDRESS -u $CI_REGISTRY_USER --password-stdin
    - docker build --pull -t "$REGISTRY_SERVER_ADDRESS/$CI_REGISTRY_IMAGE" .
    - docker push ${REGISTRY_SERVER_ADDRESS}/${CI_REGISTRY_IMAGE}

deploy-dev:
  stage: deploy
  image: kroniak/ssh-client
  before_script:
    - echo "deploying app"
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Give the right permissions, otherwise ssh-add will refuse to add files
    ## Add the SSH key stored in SSH_PRIVATE_KEY file type CI/CD variable to the agent store
    ##
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## and email.
    ##
    # - git config --global user.email "user@example.com"
    # - git config --global user.name "User name"    
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY yashins@$PROD_SERVER_IP "docker pull $REGISTRY_SERVER_ADDRESS/$CI_REGISTRY_IMAGE"
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY yashins@$PROD_SERVER_IP "docker stop personal-area-next-app || true && docker rm $CI_REGISTRY_IMAGE || true"
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY yashins@$PROD_SERVER_IP "docker run -p 3000:3000 -d --name $CI_REGISTRY_IMAGE $REGISTRY_SERVER_ADDRESS/$CI_REGISTRY_IMAGE"   



